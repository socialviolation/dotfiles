#!/bin/bash

set -e

echo "==> Starting YADM Bootstrap"

# Detect OS and package manager
OS="$(uname -s)"

if [ "$OS" = "Darwin" ]; then
    # macOS detected
    PKG_MANAGER="brew"
    INSTALL_CMD="brew install"

    # Install Homebrew if not already installed
    if ! command -v brew &> /dev/null; then
        echo "==> Installing Homebrew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

        # Add Homebrew to PATH for current session
        if [ -f "/opt/homebrew/bin/brew" ]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        elif [ -f "/usr/local/bin/brew" ]; then
            eval "$(/usr/local/bin/brew shellenv)"
        fi
    else
        echo "==> Homebrew already installed"
    fi

    # Update Homebrew
    echo "==> Updating Homebrew"
    brew update
elif command -v yay &> /dev/null; then
    PKG_MANAGER="yay"
    INSTALL_CMD="yay -S --noconfirm"
elif command -v pacman &> /dev/null; then
    PKG_MANAGER="pacman"
    INSTALL_CMD="sudo pacman -S --noconfirm"
elif command -v apt-get &> /dev/null; then
    PKG_MANAGER="apt"
    INSTALL_CMD="sudo apt-get install -y"
elif command -v dnf &> /dev/null; then
    PKG_MANAGER="dnf"
    INSTALL_CMD="sudo dnf install -y"
else
    echo "Unsupported package manager. Exiting."
    exit 1
fi

echo "==> Detected package manager: $PKG_MANAGER"

# Install essential tools (cross-platform)
echo "==> Installing essential tools"
if [ "$PKG_MANAGER" = "brew" ]; then
    $INSTALL_CMD fzf zoxide python3 direnv mise
elif [ "$PKG_MANAGER" = "yay" ] || [ "$PKG_MANAGER" = "pacman" ]; then
    $INSTALL_CMD fzf zoxide python python-pip direnv mise
elif [ "$PKG_MANAGER" = "apt" ]; then
    $INSTALL_CMD fzf python3 python3-pip direnv
    # zoxide and mise not in apt repos, install later
elif [ "$PKG_MANAGER" = "dnf" ]; then
    $INSTALL_CMD fzf zoxide python3 python3-pip direnv
fi

# Install mise if not already installed (for non-arch/non-brew systems)
if ! command -v mise &> /dev/null && [ "$PKG_MANAGER" != "brew" ]; then
    echo "==> Installing mise"
    curl https://mise.run | sh
else
    echo "==> mise already installed"
fi

# Install zoxide if not already installed (for non-arch/non-brew systems)
if ! command -v zoxide &> /dev/null && [ "$PKG_MANAGER" != "brew" ]; then
    echo "==> Installing zoxide"
    curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
else
    echo "==> zoxide already installed"
fi

# Install uv (cross-platform)
if ! command -v uv &> /dev/null; then
    echo "==> Installing uv"
    curl -LsSf https://astral.sh/uv/install.sh | sh
else
    echo "==> uv already installed"
fi

# Install zsh if not installed
if ! command -v zsh &> /dev/null; then
    echo "==> Installing zsh"
    $INSTALL_CMD zsh
else
    echo "==> zsh already installed"
fi

# Set zsh as default shell if not already
if [ "$SHELL" != "$(which zsh)" ]; then
    echo "==> Setting zsh as default shell"
    if [ "$OS" = "Darwin" ]; then
        # On macOS, add zsh to /etc/shells if not there, then use chsh
        if ! grep -q "$(which zsh)" /etc/shells; then
            echo "$(which zsh)" | sudo tee -a /etc/shells
        fi
    fi
    chsh -s "$(which zsh)"
else
    echo "==> zsh already default shell"
fi

# Create .zsh directory structure
echo "==> Creating .zsh directory structure"
mkdir -p "$HOME/.zsh/plugins"

# Install Powerlevel10k
if [ ! -d "$HOME/.powerlevel10k" ]; then
    echo "==> Installing Powerlevel10k"
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$HOME/.powerlevel10k"
else
    echo "==> Powerlevel10k already installed, updating..."
    git -C "$HOME/.powerlevel10k" pull
fi

# Install zsh plugins
install_plugin() {
    local plugin_name="$1"
    local plugin_url="$2"
    local plugin_dir="$HOME/.zsh/plugins/$plugin_name"

    if [ ! -d "$plugin_dir" ]; then
        echo "==> Installing $plugin_name"
        git clone --depth=1 "$plugin_url" "$plugin_dir"
    else
        echo "==> $plugin_name already installed, updating..."
        git -C "$plugin_dir" pull
    fi
}

install_plugin "fast-syntax-highlighting" "https://github.com/zdharma-zmirror/fast-syntax-highlighting.git"
install_plugin "zsh-autosuggestions" "https://github.com/zsh-users/zsh-autosuggestions.git"
install_plugin "zsh-completions" "https://github.com/zsh-users/zsh-completions.git"

# Install packages from Brewfile on macOS
if [ "$OS" = "Darwin" ] && [ -f "$HOME/.Brewfile" ]; then
    echo "==> Installing packages from Brewfile"
    brew bundle --file="$HOME/.Brewfile"
fi

# Install JetBrainsMono Nerd Font
echo "==> Installing JetBrainsMono Nerd Font"
if [ "$PKG_MANAGER" = "brew" ]; then
    if ! brew list --cask font-jetbrains-mono-nerd-font &> /dev/null; then
        brew install --cask font-jetbrains-mono-nerd-font
    else
        echo "==> JetBrainsMono Nerd Font already installed"
    fi
elif [ "$PKG_MANAGER" = "yay" ]; then
    if ! yay -Q ttf-jetbrains-mono-nerd &> /dev/null; then
        yay -S --noconfirm ttf-jetbrains-mono-nerd
    else
        echo "==> JetBrainsMono Nerd Font already installed"
    fi
elif [ "$PKG_MANAGER" = "pacman" ]; then
    if ! pacman -Q ttf-jetbrains-mono-nerd &> /dev/null; then
        sudo pacman -S --noconfirm ttf-jetbrains-mono-nerd
    else
        echo "==> JetBrainsMono Nerd Font already installed"
    fi
else
    # For apt/dnf and other systems, download and install manually
    FONT_DIR="$HOME/.local/share/fonts"
    if [ ! -f "$FONT_DIR/JetBrainsMonoNerdFont-Regular.ttf" ]; then
        echo "==> Downloading JetBrainsMono Nerd Font"
        mkdir -p "$FONT_DIR"
        TEMP_DIR=$(mktemp -d)
        curl -fLo "$TEMP_DIR/JetBrainsMono.zip" \
            https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip
        unzip -q "$TEMP_DIR/JetBrainsMono.zip" -d "$FONT_DIR"
        rm -rf "$TEMP_DIR"
        fc-cache -fv
    else
        echo "==> JetBrainsMono Nerd Font already installed"
    fi
fi

# Clean up zcompdump
echo "==> Cleaning zsh completion cache"
rm -f "$HOME/.zcompdump"

echo "==> Bootstrap complete! Please restart your shell or run 'source ~/.zshrc'"
